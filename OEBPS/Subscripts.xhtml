<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
  	<link href="epub.css" media="all" rel="stylesheet" type="text/css" />
  	<script type="text/javascript" src="svg.js"></script>
  </head>
  <body id="conceptual_flow_with_tasks">
    <div class="content-wrapper">
      <div id="chapter_container" class='conceptualwithtasks'>
  <article class="chapter">
    <a id="TP40016643-CH16">&#x200c;</a><a id="TP40016643-CH16-ID305">&#x200c;</a>
    <h2 class="chapter-name">Indexek</h2>
      
      	<section class="section">
      		<p class="para">Osztályok, struktúrák és enumerációs is definiálhatnak <em>indexeket (subscripts)</em>, amelyek egyszerű hozzáférést biztosítanak egy kollekció, lista vagy szekvencia elemeihez. Az indexek segítségével úgy tudjuk kiolvasni és beállítani ezeket az értékeket, hogy nincs szükség külön metódusokra a beállításhoz és kinyeréshez. Például egy <code class="code-voice">Array</code> példány elemeit a <code class="code-voice">someArray[index]</code> szintaxison keresztül, míg egy  <code class="code-voice">Dictionary</code> példány elemeit a <code class="code-voice">someDictionary[key]</code> szintaxison keresztül érhetjük el.</p><p class="para">Egy adott típushoz többféle index is definiálható és a megfelelő index az alapján lesz kiválasztva, hogy milyen típusú értéket használunk paraméterként. Az indexek nem korlátozódnak csupán egy dimenzióra és arra is lehetőség van, hogy annyi bemenő paramétert használjunk, amennyi a legjobban szolgálja az adott típus érdekeit.</p>
    		</section> 


      <section class="section">
	<a id="TP40016643-CH16-ID306">&#x200c;</a>
  <h3 class="section-name">Index szintaxis</h3>
  <p class="para">Az indexek segítségével egy adott típus pédányait tudjuk lekérdezni, ha a példány neve után szögletes zárójelek között megadjuk az index egy vagy több paraméterét A szintaxis nagyon hasonlatos a példánymetódusok és számolt tulajdonságok szintaxisához. Az index definiálásához a <code class="code-voice">subscript</code> kulcsszó használata szükséges, majd fel kell sorolnuk a bemeneti paramétereket és a visszaadott típust, ugyanúgy mint a példánymetódusok esetén. Viszont a példánymetódusokkal ellentétben, az indexek olvashatóak és írhatóak is lehetnek. Ezt a tulajdonságokhoz hasonlóan getter és setter segítségével tudjuk elérnix:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">subscript</code>(<code class="vc">index</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">get</code> {</code></li>
            <li><code class="code-voice">        <code class="c">// a megfelelő index érték visszadása</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">set</code>(<code class="vc">newValue</code>) {</code></li>
            <li><code class="code-voice">        <code class="c">// beállítások elvégzése</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">A <code class="code-voice">newValue</code> típusa megegyezik az index visszaadott típusával. Mint ahogyan a számított tulajdonságok esetén, itt sem szükséges külön specifikálni a setter <code class="code-voice">(newValue)</code> paraméterét. Ilyen esetben egy alapértelmezett <code class="code-voice">newValue</code> paramétert kap a setter.</p><p class="para">A csak olvasható kalkulált paraméterekhez hasonlóan, a <code class="code-voice">get</code> kulcsszó elhagyható a csak olvasható indexek esetén:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">subscript</code>(<code class="vc">index</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="c">// a megfelelő index érték visszadása</code></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Itt egy példa egy csak olvasható index implementációjára, amiben egy <code class="code-voice">TimesTable</code> struktúrát definiálunk ami az <em>n</em> egész számhoz tartozó szorzótáblát hivatott reprezentálni:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">struct</code> <code class="vc">TimesTable</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">let</code> <code class="vc">multiplier</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code></code></li>
            <li><code class="code-voice">    <code class="kt">subscript</code>(<code class="vc">index</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="vc">multiplier</code> * <code class="vc">index</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">threeTimesTable</code> = <code class="vc">TimesTable</code>(<code class="vc">multiplier</code>: <code class="m">3</code>)</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="s">&quot;hatszor három egyenlő </code>\(<code class="vc">threeTimesTable</code>[<code class="m">6</code>])<code class="s">&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="c">// Eredmény: &quot;hatszor három egyenlő 18&quot;</code></code></li>
        </ol>
      </div>
  </div>
</section><p class="para">A példában a létrehozott <code class="code-voice">TimesTable</code> példány a három szorzótábláját reprezentálja. A <code class="code-voice">3</code> átadásával jeleztük a struktúra <code class="code-voice">inicializálója</code> számára, hogy a példány ezt használja a <code class="code-voice">multiplier</code> paraméter értékeként.</p><p class="para">A <code class="code-voice">threeTimesTable</code> értékei lekérdezhetőek az index segítségével, mint ahogy a fenti példában is láthatjuk: <code class="code-voice">threeTimesTable[6]</code>. Ez a hatodik értéket kéri le a hármas szorzótáblából, aminek értéke <code class="code-voice">18</code>, azaz <code class="code-voice">3</code> * <code class="code-voice">6</code>.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Megjegyzés</p>
    	<p class="para">Egy <em>n</em>-hez tartozó szorzótábla fix matematikai szabályon nyugszik. Ezért nem értelmezhető a <code class="code-voice">threeTimesTable[someIndex]</code> új értékének beállíthatósága, így az index a <code class="code-voice">TimesTable</code> struktúrához csak olvasható indexként van definiálva.
    	</p>
    
  </aside>
</div>
  
</section>
<section class="section">
	<a id="TP40016643-CH16-ID307">&#x200c;</a>
  <h3 class="section-name">Index használata</h3>
  <p class="para">Az "index" pontos jelentése nagyban függ a használat kontextusától. Az indexeket általában egy kollekció, lista vagy szekvencia elemeinek egyszerű eléréséhez szokták használni. De akármilyen implementáció készíthető, attól függően, hogy mi szolgálja legjobban egy adott osztály vagy struktúra érdekeit.</p><p class="para">Például a Swift <code class="code-voice">Dictionary</code> típusa egyolyan indexeket implementál, amivel egy <code class="code-voice">Dictionary</code> példány elemeit tudjuk olvasni és írni. Úgy tudunk egy értéket megadni a dictionary számára, ha a megadott típus szerinti kulcsot kapcsos zárójelbe rakunk és megadjuk az adott indexhez tárolni kívánt értéket:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">numberOfLegs</code> = [<code class="s">&quot;spider&quot;</code>: <code class="m">8</code>, <code class="s">&quot;ant&quot;</code>: <code class="m">6</code>, <code class="s">&quot;cat&quot;</code>: <code class="m">4</code>]</code></li>
            <li><code class="code-voice"><code class="vc">numberOfLegs</code>[<code class="s">&quot;bird&quot;</code>] = <code class="m">2</code></code></li>
        </ol>
      </div>
  </div>
</section><p class="para">A fenti példában definiálunk egy <code class="code-voice">numberOfLegs</code> nevű változót és egy dictionary literal segítségével inicializáljuk, ami három kulcs-érték párost tartalmaz. A <code class="code-voice">numberOfLegs</code> dictionary pontos típusa <code class="code-voice">[String: Int]</code> lesz. Miután a dictionary létre lett hozva, a következő sorban a <code class="code-voice">&quot;bird&quot;</code> <code class="code-voice">String</code> típusú kulcssal az <code class="code-voice">Int</code> típusú <code class="code-voice">2</code> számot adjuk hozzá a dictionary-höz.</p><p class="para">További információt a <code class="code-voice">Dictionary</code> indexelésével kapcsolatban itt találhatsz: <a rel="me" data-id="//apple_ref/doc/uid/TP40016643-CH8-ID116" href="CollectionTypes.xhtml#TP40016643-CH8-ID116">Dictionary hozzáférése és módosítása</a>.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Megjegyzés</p>
    	<p class="para">A Swift <code class="code-voice">Dictionary</code> típusának kulcs-érték indexelését úgy valósították meg, hogy az index egy <em>opcionális</em> típust fogad és tér vissza vele. A fenti <code class="code-voice">numberOfLegs</code> dictionary, kulcs-érték értéke <code class="code-voice">Int?</code> típust fogad és ad vissza, azaz “opcionális int”. A <code class="code-voice">Dictionary</code> típus ezt az opcionális megközelítést használja azon egyszerű ok miatt, hogy nem minden kulcshoz tartozik érték illetve egy adott kulcshoz rendlt értéke egyszerűen törölhető a <code class="code-voice">nil</code> értékül adásával.
    	</p>
    
  </aside>
</div>
  
</section>
<section class="section">
	<a id="TP40016643-CH16-ID308">&#x200c;</a>
  <h3 class="section-name">Index opciók</h3>
  <p class="para">Az indexek akárhány input paraméterrel rendelkezhetnek és ezek típusa is bármilyen lehet. Tovább a visszaadott típus is bármi lehet. Az indexek használhatnak fix és változó számú paramétereket is, de nem lehet in-out paramétereket vagy alapértelmezett paraméter értékeket használni.</p><p class="para">Egy osztály vagy struktúra tetszőleges számú indexet tartalmazhat, a megfelelő index a használt érték típusa alapján vagy a szögletes zárójelben megadott paraméter(ek) típusa alapján kerül majd kiválasztásra. Több index egyidejű definicióját szokás <em>index túlterhelésnek (subscript overloading)</em> is nevezni.</p><p class="para">A legtöbb esetben csupán egy paramétert szoktunk használni az indexek esetén, de ha szükségét érezzük, semmi akadálya több paraméter használatának. A következő példában a <code class="code-voice">Matrix</code> struktúrát hozzuk létre ami egy kétdimenziós <code class="code-voice">Double</code> típusú mátrixot reprezentál. A <code class="code-voice">Matrix</code> struktúra indexe két integer paramétert vár tőlünk:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">struct</code> <code class="vc">Matrix</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">let</code> <code class="vc">rows</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>, <code class="vc">columns</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code></code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">grid</code>: [<code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code>]</code></li>
            <li><code class="code-voice">    <code class="kt">init</code>(<code class="vc">rows</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>, <code class="vc">columns</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">        <code class="kt">self</code>.<code class="vc">rows</code> = <code class="vc">rows</code></code></li>
            <li><code class="code-voice">        <code class="kt">self</code>.<code class="vc">columns</code> = <code class="vc">columns</code></code></li>
            <li><code class="code-voice">        <code class="vc">grid</code> = <code class="vc">Array</code>(<code class="vc">count</code>: <code class="vc">rows</code> * <code class="vc">columns</code>, <code class="vc">repeatedValue</code>: <code class="m">0.0</code>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">indexIsValidForRow</code>(<code class="vc">row</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>, <code class="vc">column</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Bool<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="vc">row</code> &gt;= <code class="m">0</code> &amp;&amp; <code class="vc">row</code> &lt; <code class="vc">rows</code> &amp;&amp; <code class="vc">column</code> &gt;= <code class="m">0</code> &amp;&amp; <code class="vc">column</code> &lt; <code class="vc">columns</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">subscript</code>(<code class="vc">row</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>, <code class="vc">column</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">get</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">assert</code>(<code class="vc">indexIsValidForRow</code>(<code class="vc">row</code>, <code class="vc">column</code>: <code class="vc">column</code>), <code class="s">&quot;Index out of range&quot;</code>)</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="vc">grid</code>[(<code class="vc">row</code> * <code class="vc">columns</code>) + <code class="vc">column</code>]</code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">        <code class="kt">set</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">assert</code>(<code class="vc">indexIsValidForRow</code>(<code class="vc">row</code>, <code class="vc">column</code>: <code class="vc">column</code>), <code class="s">&quot;Index out of range&quot;</code>)</code></li>
            <li><code class="code-voice">            <code class="vc">grid</code>[(<code class="vc">row</code> * <code class="vc">columns</code>) + <code class="vc">column</code>] = <code class="vc">newValue</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">A <code class="code-voice">Matrix</code> inicializálója két paramétert fogad: <code class="code-voice">rows</code> és <code class="code-voice">columns</code>, majd létrehoz egy tömböt, ami elég nagy <code class="code-voice">rows * columns</code> számú <code class="code-voice">Double</code> típusú érték tárolására. A mátrix minden értéke alapértékként <code class="code-voice">0.0</code> lesz. Ehhez a tömb méretét és a <code class="code-voice">0.0</code> alapértéket átadjuk a tömb inicializálójának. Az inicializálóról bővebben itt olvashatsz <a rel="me" data-id="//apple_ref/doc/uid/TP40016643-CH8-ID501" href="CollectionTypes.xhtml#TP40016643-CH8-ID501">Egy tömb létrehozásak alapértékkel</a>.</p><p class="para">Létre tudsz hozni egy új <code class="code-voice">Matrix</code> példányt a sorok és oszlopok számának megadásával az inicializáló számára:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">matrix</code> = <code class="vc">Matrix</code>(<code class="vc">rows</code>: <code class="m">2</code>, <code class="vc">columns</code>: <code class="m">2</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Az előző példában létrehozott <code class="code-voice">Matrix</code> példány két sort és két oszlopot tartalmaz. A <code class="code-voice">Matrix</code> példány <code class="code-voice">grid</code> tömbje a mátrix kilapított, egy dimenziós változatát reprezentálja, bel felülről jobb alulra haladva:</p><div class="figure">
	<span class="caption"></span>
	<img src="Art/subscriptMatrix01_2x.png" alt="image: ../Art/subscriptMatrix01_2x.png" width="280" height="173" />
</div><p class="para">A mátrix egy elemének az értékét, a szögletes zárójelek közé rakott, vesszővel elválasztott sor és oszlop értékek megadásával lehet megváltoztatni:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="vc">matrix</code>[<code class="m">0</code>, <code class="m">1</code>] = <code class="m">1.5</code></code></li>
            <li><code class="code-voice"><code class="vc">matrix</code>[<code class="m">1</code>, <code class="m">0</code>] = <code class="m">3.2</code></code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Az első utasítás az index setter-ét hívja meg, hogy a mátrix jobb felső pozíciójában az új érték <code class="code-voice">1.5</code> legyen (ahol a <code class="code-voice">row</code> értéke <code class="code-voice">0</code> és a <code class="code-voice">column</code> értéke <code class="code-voice">1</code>), míg <code class="code-voice">3.2</code> legyen a bal alsó pozícióban (ahol a <code class="code-voice">row</code> értéke <code class="code-voice">1</code> és a <code class="code-voice">column</code> értéke <code class="code-voice">0</code>):</p><div class="figure">
	<span class="caption"></span>
	<img src="Art/subscriptMatrix02_2x.png" alt="image: ../Art/subscriptMatrix02_2x.png" width="98" height="62" />
</div><p class="para">A getter és setter is tartalmaz egy ellenőrzést, hogy a megadott <code class="code-voice">row</code> és <code class="code-voice">column</code> értékek megfelelőek-e. Ezt az ellenőrzést elősegítendő, a <code class="code-voice">Matrix</code> rendelkezik egy <code class="code-voice">indexIsValidForRow(_:column:)</code> metódussal, ami megvizsgálja, hogy az átadott <code class="code-voice">row</code> és <code class="code-voice">column</code> paraméterek megfelelnek-e a mátrix dimenzióinak:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">indexIsValidForRow</code>(<code class="vc">row</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>, <code class="vc">column</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Bool<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">row</code> &gt;= <code class="m">0</code> &amp;&amp; <code class="vc">row</code> &lt; <code class="vc">rows</code> &amp;&amp; <code class="vc">column</code> &gt;= <code class="m">0</code> &amp;&amp; <code class="vc">column</code> &lt; <code class="vc">columns</code></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Hibához fog vezetni, ha olyan indexet használunk ami a mátrix határain kívól esik:</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">someValue</code> = <code class="vc">matrix</code>[<code class="m">2</code>, <code class="m">2</code>]</code></li>
            <li><code class="code-voice"><code class="c">// hibás, mivel a [2, 2] a mátrix határain kívülre esik</code></code></li>
        </ol>
      </div>
  </div>
</section>
  
</section>

  </article>
</div>

    </div>
  </body>
</html>
